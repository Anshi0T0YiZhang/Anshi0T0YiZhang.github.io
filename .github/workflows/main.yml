# .github/workflows/notion-sync.yml
name: Notion to Jekyll Sync
on:
  schedule:
    - cron: "0 12 * * *"  # 每天UTC时间12点自动同步
  workflow_dispatch:       # 支持手动触发

jobs:
  sync-notion-pages:
    runs-on: ubuntu-latest
    steps:
      # ----------- 步骤1：拉取仓库代码 -----------
      - name: Checkout repository
        uses: actions/checkout@v4

      # ----------- 步骤2：设置Python环境 -----------
      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      # ----------- 步骤3：安装依赖（使用正确包名和版本） -----------
      - name: Install dependencies
        run: |
          pip install \
            notion-client==2.2.0 \
            python-frontmatter==1.0.0 \
            requests==2.31.0 \
            mdutils==1.5.0 \  # 替代方案：标准Markdown处理库
            --index-url https://pypi.tuna.tsinghua.edu.cn/simple \
            --trusted-host pypi.tuna.tsinghua.edu.cn \
            --no-cache-dir

      # ----------- 步骤4：执行转换脚本 -----------
      - name: Convert Notion pages to Jekyll posts
        env:
          NOTION_TOKEN: ${{ secrets.NOTION_TOKEN }}
          NOTION_DATABASE_ID: ${{ secrets.NOTION_DATABASE_ID }}
        run: |
          cat << 'EOF' > notion_to_jekyll.py
          import os
          import logging
          from notion_client import Client
          import frontmatter
          from mdutils import MdUtils  # 改用标准Markdown库
          import requests

          # 配置日志
          logging.basicConfig(level=logging.INFO)
          logger = logging.getLogger(__name__)

          def get_page_content(page_id):
              """直接通过Notion API获取页面内容"""
              try:
                  blocks = notion.blocks.children.list(block_id=page_id)["results"]
                  return "\n".join([_parse_block(b) for b in blocks])
              except Exception as e:
                  logger.error(f"获取页面内容失败: {str(e)}")
                  return ""

          def _parse_block(block):
              """解析Notion块为Markdown"""
              type_ = block["type"]
              content = block[type_]
              
              # 基础文本处理
              if type_ == "paragraph":
                  return "".join([t["plain_text"] for t in content["rich_text"]])
              elif type_ == "heading_1":
                  return f"# {content['rich_text'][0]['plain_text']}"
              elif type_ == "image":
                  return f"![]({content['external']['url']})"  # 简单处理外部图片
              return ""

          def main():
              notion = Client(auth=os.environ["NOTION_TOKEN"])
              database_id = os.environ["NOTION_DATABASE_ID"]

              # 查询已发布文章
              try:
                  pages = notion.databases.query(
                      database_id,
                      filter={"property": "Status", "select": {"equals": "Published"}}
                  ).get("results", [])
              except Exception as e:
                  logger.error(f"数据库查询失败: {str(e)}")
                  return

              for page in pages:
                  try:
                      # 提取基础字段
                      title = page["properties"]["Title"]["title"][0]["plain_text"].strip()
                      slug = page["properties"]["Slug"]["rich_text"][0]["plain_text"].strip()
                      date_str = page["properties"]["Date"]["date"]["start"].split("T")[0]
                      page_id = page["id"]

                      # 获取页面内容
                      content = get_page_content(page_id)

                      # 构建Markdown
                      md = MdUtils(file_name="temp")
                      md.new_header(level=1, title=title)
                      md.new_paragraph(content)
                      
                      # 生成Front Matter
                      post = frontmatter.Post(md.file_data)
                      post["title"] = title
                      post["date"] = date_str
                      post["layout"] = "post"

                      # 保存文件
                      filename = f"_posts/{date_str}-{slug}.md"
                      with open(filename, "w", encoding="utf-8") as f:
                          f.write(frontmatter.dumps(post))
                      logger.info(f"成功生成: {filename}")

                  except Exception as e:
                      logger.error(f"处理失败: {str(e)} (Page ID: {page_id})")

          if __name__ == "__main__":
              main()
          EOF

          # 执行脚本
          python notion_to_jekyll.py

      # ----------- 步骤5：提交变更 -----------
      - name: Commit changes
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "Auto-sync from Notion"
          file_pattern: "_posts/*"
          commit_user_name: "Notion Sync Bot"
          commit_user_email: "actions@github.com"
