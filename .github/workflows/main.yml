name: Notion to Jekyll Sync v1

on:
  schedule:
    - cron: "0 12 * * *"  # 每天 UTC 时间 12 点自动同步
  workflow_dispatch:       # 支持手动触发

jobs:
  sync-notion-pages:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          pip install --cache-dir=/tmp/pip-cache \
            notion-client==2.2.0 \
            python-frontmatter==1.0.0 \
            requests==2.31.0 \
            mdutils==1.5.0 \
            Pillow==9.3.0 \
            python-dateutil==2.8.2 \
            --index-url https://pypi.tuna.tsinghua.edu.cn/simple \
            --trusted-host pypi.tuna.tsinghua.edu.cn

      - name: Convert Notion pages to Jekyll posts
        env:
          NOTION_TOKEN: ${{ secrets.NOTION_TOKEN }}
          NOTION_DATABASE_ID: ${{ secrets.NOTION_DATABASE_ID }}
          PERSONAL_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
        run: |
          cat << 'EOF' > notion_to_jekyll.py
          import os
          import logging
          import json
          from datetime import datetime
          from dateutil import parser  # 用于解析 Notion 的时间格式
          from notion_client import Client
          import frontmatter
          from mdutils import MdUtils
          import requests
          import glob
          import shutil
          import base64
          import hashlib
          from PIL import Image
          from io import BytesIO

          logging.basicConfig(level=logging.INFO)
          logger = logging.getLogger(__name__)

          # 读取上次同步的时间戳
          def get_last_sync_time():
              try:
                  with open('.last_sync.txt', 'r') as f:
                      # 假设本地时间戳是UTC时间
                      return datetime.fromisoformat(f.read().strip()).replace(tzinfo=None)
              except:
                  return None

          # 保存本次同步的时间戳
          def save_last_sync_time():
              with open('.last_sync.txt', 'w') as f:
                  f.write(datetime.now().isoformat())

          def get_page_content(page_id):
              """通过 Notion API 获取页面内容（含递归子块解析）"""
              try:
                  blocks = []
                  client = Client(auth=os.environ["NOTION_TOKEN"])
                  result = client.blocks.children.list(block_id=page_id)
                  while True:
                      blocks.extend(result.get("results", []))
                      if not result.get("has_more"):
                          break
                      result = client.blocks.children.list(
                          block_id=page_id,
                          start_cursor=result.get("next_cursor")
                      )
                  return "\n\n".join([_parse_block(b) for b in blocks])  # 修改点：双换行拼接
              except Exception as e:
                  logger.error(f"获取内容失败: {str(e)}")
                  return ""

          def _parse_block(block):
              """解析 Notion 块为 Markdown（支持更多类型）"""
              type_ = block["type"]
              content = block[type_]
              text = "".join([t["plain_text"] for t in content.get("rich_text", [])])
              
              # 段落与标题处理
              if type_ == "paragraph":
                  return text + "\n"  # 修改点：追加换行
              elif type_ == "heading_1":
                  return f"# {text}\n"
              elif type_ == "heading_2":
                  return f"## {text}\n"
              elif type_ == "heading_3":
                  return f"### {text}\n"
              elif type_ == "bulleted_list_item":
                  return f"- {text}\n"
              elif type_ == "numbered_list_item":
                  return f"1. {text}\n"
              # 图片处理
              elif type_ == "image":
                  original_url = content.get("external", {}).get("url") or content.get("file", {}).get("url")
                  if not original_url:
                      return ""
                  
                  # 生成唯一的文件名，改为 jpg 格式
                  file_name = hashlib.md5(original_url.encode()).hexdigest() + ".jpg"
                  
                  # 检查图片是否已经存在
                  if os.path.exists(f"img/in-post/{file_name}"):
                      # 使用已有的图片链接
                      cdn_url = f"https://ajiao.eu.org/img/in-post/{file_name}"
                      return f"![]({cdn_url})\n"
                  
                  # 下载图片
                  try:
                      response = requests.get(original_url)
                      response.raise_for_status()
                  except requests.exceptions.RequestException as e:
                      logger.error(f"下载图片失败: {str(e)}")
                      return f"![]({original_url})\n"
                  
                  # 将图片转换为 JPG 格式并压缩
                  try:
                      image = Image.open(BytesIO(response.content))
                      image = image.convert("RGB")  # 确保是 RGB 模式
                      
                      # 压缩图片
                      image.thumbnail((1920, 1080))  # 调整大小以压缩
                      image_bytes = BytesIO()
                      image.save(image_bytes, format="JPEG", quality=85)
                      image_content = image_bytes.getvalue()
                  except Exception as e:
                      logger.error(f"图片格式转换失败: {str(e)}")
                      return f"![]({original_url})\n"
                  
                  # 上传图片到当前仓库的 img/in-post 目录
                  try:
                      # 使用 GitHub API 上传文件
                      github_token = os.environ["PERSONAL_TOKEN"]
                      repo = os.environ["GITHUB_REPOSITORY"]  # 当前仓库
                      branch = "master"  # 设置为 master 分支
                      
                      # 使用 GitHub API 创建或更新文件
                      headers = {
                          "Authorization": f"token {github_token}",
                          "Accept": "application/vnd.github.v3+json"
                      }
                      url = f"https://api.github.com/repos/{repo}/contents/img/in-post/{file_name}"
                      data = {
                          "message": f"Add image {file_name}",
                          "content": base64.b64encode(image_content).decode(),
                          "branch": branch
                      }
                      response = requests.put(url, headers=headers, json=data)
                      response.raise_for_status()
                  except Exception as e:
                      logger.error(f"上传图片到 ‌‍
