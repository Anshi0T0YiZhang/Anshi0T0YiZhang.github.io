name: Notion to Jekyll Sync
on:
  schedule:
    - cron: "0 12 * * *"
  workflow_dispatch:

jobs:
  sync-notion-pages:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set sync mode
        id: set-mode
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "SYNC_MODE=incremental" >> $GITHUB_ENV
          else
            echo "SYNC_MODE=full" >> $GITHUB_ENV
          fi

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          pip install \
            notion-client==2.2.0 \
            python-frontmatter==1.0.0 \
            requests==2.31.0 \
            mdutils==1.5.0 \
            --index-url https://pypi.tuna.tsinghua.edu.cn/simple \
            --trusted-host pypi.tuna.tsinghua.edu.cn \
            --no-cache-dir

      - name: Convert Notion pages to Jekyll posts
        env:
          NOTION_TOKEN: ${{ secrets.NOTION_TOKEN }}
          NOTION_DATABASE_ID: ${{ secrets.NOTION_DATABASE_ID }}
          SYNC_MODE: ${{ env.SYNC_MODE }}
        run: |
          cat << 'EOF' > notion_to_jekyll.py
          import os
          import glob
          import logging
          from datetime import datetime, timezone
          from notion_client import Client
          import frontmatter
          import requests

          logging.basicConfig(level=logging.INFO)
          logger = logging.getLogger(__name__)

          def get_page_content(page_id):
              blocks = []
              client = Client(auth=os.environ["NOTION_TOKEN"])
              result = client.blocks.children.list(block_id=page_id)
              while True:
                  blocks.extend(result.get("results", []))
                  if not result.get("has_more"):
                      break
                  result = client.blocks.children.list(
                      block_id=page_id,
                      start_cursor=result.get("next_cursor")
                  )
              return "\n\n".join([_parse_block(b) for b in blocks])

          def _parse_block(block):
              type_ = block["type"]
              content = block[type_]
              text = "".join([t["plain_text"] for t in content.get("rich_text", [])])

              handlers = {
                  "paragraph": lambda: f"{text}\n",
                  "heading_1": lambda: f"# {text}\n",
                  "heading_2": lambda: f"## {text}\n",
                  "heading_3": lambda: f"### {text}\n",
                  "bulleted_list_item": lambda: f"- {text}\n",
                  "numbered_list_item": lambda: f"1. {text}\n",
                  "image": lambda: f"![]({content.get('external', {}).get('url') or content.get('file', {}).get('url')})\n",
                  "code": lambda: (
                      f"```{content['language']}\n"
                      + "\n".join([t["plain_text"] for t in content["rich_text"]])
                      + "\n```\n"
                  ),
                  "quote": lambda: f"> {text}\n",
                  "callout": lambda: f"**{text}**\n",
                  "divider": lambda: "---\n"
              }
              return handlers.get(type_, lambda: "")()

          def main():
              notion = Client(auth=os.environ["NOTION_TOKEN"])
              database_id = os.environ["NOTION_DATABASE_ID"]
              SYNC_MODE = os.getenv("SYNC_MODE", "full")

              all_pages = []
              query_params = {
                  "database_id": database_id,
                  "filter": {"property": "Status", "select": {"equals": "Published"}}
              }
              while True:
                  response = notion.databases.query(**query_params)
                  all_pages.extend(response.get("results", []))
                  if not response.get("has_more"):
                      break
                  query_params["start_cursor"] = response.get("next_cursor")

              current_ids = {page["id"]: page for page in all_pages}

              if SYNC_MODE == "incremental":
                  try:
                      with open(".last_sync_time", "r") as f:
                          last_sync = datetime.fromisoformat(f.read().strip())
                  except FileNotFoundError:
                      last_sync = datetime(1970, 1, 1, tzinfo=timezone.utc)
                  
                  pages_to_process = [
                      p for p in all_pages
                      if datetime.fromisoformat(p["last_edited_time"].rstrip("Z")) > last_sync
                  ]
              else:
                  pages_to_process = all_pages

              for page in pages_to_process:
                  try:
                      props = page["properties"]
                      title = props["Title"]["title"][0]["plain_text"].strip()
                      date_str = props["Date"]["date"]["start"].split("T")[0]

                      post = frontmatter.Post("")
                      post["title"] = title
                      post["date"] = date_str
                      post["layout"] = "post"
                      post["notion_id"] = page["id"]

                      optional_fields = {
                          "Subtitle": ("rich_text", ""),
                          "Header-img": ("rich_text", ""),
                          "Catalog": ("checkbox", False),
                          "Tags": ("multi_select", [])
                      }
                      for field, (type_, default) in optional_fields.items():
                          value = props.get(field, {}).get(type_, default)
                          if type_ == "rich_text" and value:
                              value = value[0]["plain_text"]
                          post[field.lower()] = value

                      content = get_page_content(page["id"])
                      post.content = content
                      filename = f"_posts/{date_str}-{title.replace(' ', '-')}.md"
                      with open(filename, "w", encoding="utf-8") as f:
                          f.write(frontmatter.dumps(post))
                      logger.info(f"Processed: {filename}")

                  except Exception as e:
                      logger.error(f"Error processing {page['id']}: {str(e)}")

              existing_files = glob.glob("_posts/*.md")
              for file_path in existing_files:
                  try:
                      with open(file_path, "r", encoding="utf-8") as f:
                          post = frontmatter.load(f)
                          if "notion_id" not in post.metadata:
                              continue
                          
                          if post["notion_id"] not in current_ids:
                              os.remove(file_path)
                              logger.info(f"Removed deleted post: {file_path}")
                  except Exception as e:
                      logger.error(f"Error checking {file_path}: {str(e)}")

              with open(".last_sync_time", "w") as f:
                  f.write(datetime.now(timezone.utc).isoformat())

          if __name__ == "__main__":
              main()
          EOF

          python notion_to_jekyll.py

      - name: Create backup (Full sync only)
        if: env.SYNC_MODE == 'full'
        run: |
          mkdir -p _posts_backup
          cp -r _posts _posts_backup/$(date +%Y%m%d)

      - name: Commit changes
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "Auto-sync from Notion (${{ env.SYNC_MODE }})"
          file_pattern: "_posts/* .last_sync_time"
