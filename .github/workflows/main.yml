# .github/workflows/notion-sync.yml
name: Notion to Jekyll Sync
on:
  schedule:
    - cron: "0 12 * * *"  # 每天UTC时间12点自动同步
  workflow_dispatch:       # 支持手动触发

jobs:
  sync-notion-pages:
    runs-on: ubuntu-latest
    steps:
      # ----------- 步骤1：拉取仓库代码 -----------
      - name: Checkout repository
        uses: actions/checkout@v4

      # ----------- 步骤2：设置Python环境 -----------
      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      # ----------- 步骤3：安装依赖 -----------
      - name: Install dependencies
        run: |
          pip install \
            notion-client==2.2.0 \
            python-frontmatter==1.0.0 \
            requests==2.31.0 \
            --index-url https://pypi.tuna.tsinghua.edu.cn/simple \
            --trusted-host pypi.tuna.tsinghua.edu.cn

      # ----------- 步骤4：执行转换脚本 -----------
      - name: Convert Notion pages to Jekyll posts
        env:
          NOTION_TOKEN: ${{ secrets.NOTION_TOKEN }}
          NOTION_DATABASE_ID: ${{ secrets.NOTION_DATABASE_ID }}
        run: |
          cat << 'EOF' > notion_to_jekyll.py
          import os
          import logging
          from notion_client import Client
          import frontmatter
          from datetime import datetime

          logging.basicConfig(level=logging.INFO)
          logger = logging.getLogger(__name__)

          REQUIRED_FIELDS = ["Title", "Slug", "Date", "Status", "Author", "Tags"]

          def validate_fields(properties):
              """校验必需字段存在"""
              missing = [field for field in REQUIRED_FIELDS if field not in properties]
              if missing:
                  raise ValueError(f"缺失必需字段: {missing}")

          def get_field_value(prop, field_type="rich_text"):
              """安全获取字段值"""
              try:
                  if field_type == "rich_text":
                      return prop[field_type][0]["plain_text"].strip()
                  elif field_type == "date":
                      return prop[field_type]["start"].split("T")[0]
                  elif field_type == "multi_select":
                      return [tag["name"] for tag in prop[field_type]]
                  elif field_type == "select":
                      return prop[field_type]["name"]
              except (KeyError, IndexError, TypeError):
                  return ""

          def main():
              notion = Client(auth=os.environ["NOTION_TOKEN"])
              database_id = os.environ["NOTION_DATABASE_ID"]

              # 查询已发布文章
              pages = notion.databases.query(
                  database_id,
                  filter={"property": "Status", "select": {"equals": "Published"}}
              ).get("results", [])

              for page in pages:
                  try:
                      props = page["properties"]
                      validate_fields(props)

                      # 提取字段（带默认值）
                      title = get_field_value(props["Title"], "title") or "Untitled"
                      slug = get_field_value(props["Slug"]) or "untitled"
                      date = get_field_value(props["Date"], "date") or datetime.now().strftime("%Y-%m-%d")
                      author = get_field_value(props["Author"]) or "Anonymous"
                      header_img = get_field_value(props["HeaderImg"])  # 可选字段
                      subtitle = get_field_value(props["Subtitle"])     # 可选字段
                      tags = get_field_value(props["Tags"], "multi_select")
                      catalog = "true" if get_field_value(props["Catalog"], "checkbox") else "false"

                      # 构建Front Matter
                      post = frontmatter.Post("")
                      post["layout"] = "post"
                      post["title"] = title
                      post["subtitle"] = subtitle
                      post["date"] = date
                      post["author"] = author
                      post["header-img"] = header_img
                      post["catalog"] = catalog
                      post["tags"] = tags

                      # 生成符合Jekyll规范的文件名
                      filename = f"_posts/{date}-{slug}.md"
                      with open(filename, "w", encoding="utf-8") as f:
                          f.write(frontmatter.dumps(post) + "\n\n" + "{{ page.content }}")

                  except Exception as e:
                      logger.error(f"处理失败: {str(e)} (Page ID: {page['id']}")

          if __name__ == "__main__":
              main()
          EOF

          python notion_to_jekyll.py

      # ----------- 步骤5：提交变更 -----------
      - name: Commit changes
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "Auto-sync from Notion"
          file_pattern: "_posts/*"
