# .github/workflows/notion-sync.yml
name: Notion Sync & Deploy
on:
  schedule:
    - cron: "0 12 * * *"  # 每天UTC时间12点自动同步
  workflow_dispatch:       # 支持手动触发

jobs:
  sync-and-deploy:
    runs-on: ubuntu-latest
    steps:
      # ----------- 步骤1：拉取仓库代码 -----------
      - name: Checkout repository
        uses: actions/checkout@v4

      # ----------- 步骤2：设置Python环境 -----------
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      # ----------- 步骤3：安装依赖 -----------
      - name: Install dependencies
        run: |
          pip install \
            notion-client==2.2.0 \
            python-frontmatter==1.0.0 \
            requests==2.31.0 \
            --index-url https://pypi.tuna.tsinghua.edu.cn/simple

      # ----------- 步骤4：执行同步脚本 -----------
      - name: Sync Notion to Jekyll
        env:
          NOTION_TOKEN: ${{ secrets.NOTION_TOKEN }}
          NOTION_DATABASE_ID: ${{ secrets.NOTION_DATABASE_ID }}
        run: |
          cat << 'EOF' > notion_to_jekyll.py
          import os
          import logging
          from notion_client import Client
          import frontmatter
          import requests

          logging.basicConfig(level=logging.INFO)
          logger = logging.getLogger(__name__)

          def get_page_content(notion, page_id):
              """获取Notion页面内容"""
              try:
                  blocks = []
                  result = notion.blocks.children.list(block_id=page_id)
                  while True:
                      blocks.extend(result.get("results", []))
                      if not result.get("has_more"):
                          break
                      result = notion.blocks.children.list(
                          block_id=page_id,
                          start_cursor=result.get("next_cursor")
                      )
                  return "\n".join([parse_block(b) for b in blocks])
              except Exception as e:
                  logger.error(f"内容获取失败: {str(e)}")
                  return ""

          def parse_block(block):
              """解析Notion块为Markdown"""
              type_ = block["type"]
              content = block.get(type_, {})
              
              # 文本处理
              if "rich_text" in content and content["rich_text"]:
                  text = "".join([t["plain_text"] for t in content["rich_text"]])
                  if type_ == "heading_1":
                      return f"# {text}"
                  elif type_ == "heading_2":
                      return f"## {text}"
                  elif type_ == "paragraph":
                      return text
                  elif type_ == "bulleted_list_item":
                      return f"- {text}"
                  elif type_ == "numbered_list_item":
                      return f"1. {text}"

              # 图片处理
              elif type_ == "image":
                  url = content.get("external", {}).get("url", "")
                  return f"![]({url})"

              return ""

          def main():
              notion = Client(auth=os.environ["NOTION_TOKEN"])
              database_id = os.environ["NOTION_DATABASE_ID"]

              # 查询已发布文章
              pages = notion.databases.query(
                  database_id,
                  filter={"property": "Status", "select": {"equals": "Published"}}
              ).get("results", [])

              for page in pages:
                  try:
                      props = page["properties"]

                      # 提取字段
                      title = props["Title"]["title"][0]["plain_text"].strip()
                      slug = props["Slug"]["rich_text"][0]["plain_text"].strip()
                      date = props["Date"]["date"]["start"].split("T")[0]
                      author = props["Author"]["rich_text"][0]["plain_text"].strip()
                      header_img = props["Header-img"]["rich_text"][0]["plain_text"].strip()
                      tags = [tag["name"] for tag in props["Tags"]["multi_select"]]

                      # 获取页面内容
                      page_id = page["id"]
                      content = get_page_content(notion, page_id)

                      # 构建Front Matter
                      post = frontmatter.Post(content)
                      post["layout"] = "post"
                      post["title"] = title
                      post["subtitle"] = props.get("Subtitle", {}).get("rich_text", [{}])[0].get("plain_text", "")
                      post["date"] = date
                      post["author"] = author
                      post["header-img"] = header_img
                      post["catalog"] = "true"
                      post["tags"] = tags

                      # 生成文件
                      filename = f"_posts/{date}-{slug}.md"
                      with open(filename, "w", encoding="utf-8") as f:
                          f.write(frontmatter.dumps(post))
                      logger.info(f"生成成功: {filename}")

                  except Exception as e:
                      logger.error(f"处理失败: {str(e)} (Page ID: {page['id']})")

          if __name__ == "__main__":
              main()
          EOF

          python notion_to_jekyll.py

      # ----------- 步骤5：构建Jekyll站点 -----------
      - name: Build Jekyll Site
        uses: docker://jekyll/jekyll
        with:
          args: jekyll build -d ./_site

      # ----------- 步骤6：部署到Cloudflare Pages -----------
      - name: Deploy to Cloudflare
        uses: cloudflare/pages-action@1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: "iajiao"  # 替换为你的项目名
          directory: "./_site"
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
