name: Notion to Jekyll Sync v3 with Image Compression
on:
  schedule:
    - cron: "0 12 * * *"  # 每天 UTC 时间 12 点自动同步
  workflow_dispatch:       # 支持手动触发

jobs:
  sync-notion-pages:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          pip install --cache-dir=/tmp/pip-cache \
            notion-client==2.2.0 \
            python-frontmatter==1.0.0 \
            requests==2.31.0 \
            mdutils==1.5.0 \
            Pillow==9.3.0 \
            --index-url https://pypi.tuna.tsinghua.edu.cn/simple \
            --trusted-host pypi.tuna.tsinghua.edu.cn

      - name: Convert Notion pages to Jekyll posts
        env:
          NOTION_TOKEN: ${{ secrets.NOTION_TOKEN }}
          NOTION_DATABASE_ID: ${{ secrets.NOTION_DATABASE_ID }}
          PERSONAL_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
        run: |
          cat << 'EOF' > notion_to_jekyll.py
          import os
          import logging
          import json
          from datetime import datetime
          from notion_client import Client
          import frontmatter
          from mdutils import MdUtils
          import requests
          import glob
          import shutil
          import base64
          import hashlib
          from PIL import Image
          from io import BytesIO

          logging.basicConfig(level=logging.INFO)
          logger = logging.getLogger(__name__)

          # 读取上次同步的时间戳
          def get_last_sync_time():
              try:
                  with open('.last_sync.txt', 'r') as f:
                      return datetime.fromisoformat(f.read().strip())
              except:
                  return None

          # 保存本次同步的时间戳
          def save_last_sync_time():
              with open('.last_sync.txt', 'w') as f:
                  f.write(datetime.now().isoformat())

          def get_page_content(page_id):
              """通过 Notion API 获取页面内容（含递归子块解析）"""
              try:
                  blocks = []
                  client = Client(auth=os.environ["NOTION_TOKEN"])
                  result = client.blocks.children.list(block_id=page_id)
                  while True:
                      blocks.extend(result.get("results", []))
                      if not result.get("has_ ‌‍
