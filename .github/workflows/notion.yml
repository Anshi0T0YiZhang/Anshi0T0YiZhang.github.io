name: Notion to Jekyll Sync v2
on:
  schedule:
    - cron: "0 12 * * *"  # 每天UTC时间12点全量同步
  workflow_dispatch:       # 手动触发时增量同步

jobs:
  sync-notion-pages:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整提交历史

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          pip install \
            notion-client==2.2.0 \
            python-frontmatter==1.0.0 \
            requests==2.31.0 \
            mdutils==1.5.0 \
            python-dotenv==1.0.0 \
            --index-url https://pypi.tuna.tsinghua.edu.cn/simple \
            --trusted-host pypi.tuna.tsinghua.edu.cn \
            --no-cache-dir

      - name: Convert Notion pages
        env:
          NOTION_TOKEN: ${{ secrets.NOTION_TOKEN }}
          NOTION_DATABASE_ID: ${{ secrets.NOTION_DATABASE_ID }}
          SYNC_MODE: ${{ github.event_name == 'workflow_dispatch' && 'incremental' || 'full' }}
        run: |
          cat << 'EOF' > notion_to_jekyll.py
          import os
          import logging
          import json
          from datetime import datetime, timedelta
          from notion_client import Client
          import frontmatter
          from mdutils import MdUtils
          import requests
          from dotenv import load_dotenv

          # 配置初始化
          load_dotenv()
          logging.basicConfig(level=logging.INFO)
          logger = logging.getLogger(__name__)

          SYNC_RECORD = "sync_record.json"
          LAST_SYNC_FILE = ".last_sync"

          def get_last_sync_time():
              try:
                  with open(LAST_SYNC_FILE, "r") as f:
                      return datetime.fromisoformat(f.read().strip())
              except:
                  return datetime.now() - timedelta(days=365)

          def save_sync_time():
              with open(LAST_SYNC_FILE, "w") as f:
                  f.write(datetime.now().isoformat())

          def get_page_content(page_id):
              """优化版内容获取（减少API调用）"""
              try:
                  client = Client(auth=os.environ["NOTION_TOKEN"])
                  blocks = []
                  result = client.blocks.children.list(block_id=page_id)
                  blocks.extend(result.get("results", []))
                  return "\n\n".join([_parse_block(b) for b in blocks])
              except Exception as e:
                  logger.error(f"获取内容失败: {str(e)}")
                  return ""

          def _parse_block(block):
              """极简格式处理"""
              type_ = block["type"]
              content = block[type_]
              # 仅提取纯文本（忽略所有格式）
              text = "".join([t["plain_text"] for t in content.get("rich_text", [])])
              
              # 核心块处理
              if type_ == "paragraph":
                  return text
              elif type_ == "heading_1":
                  return f"# {text}\n"
              elif type_ == "heading_2":
                  return f"## {text}\n"
              elif type_ == "image":
                  url = content.get("external", {}).get("url") or content.get("file", {}).get("url")
                  return f"![]({url})\n"
              elif type_ == "code":
                  code = "".join([t["plain_text"] for t in content["rich_text"]])
                  return f"```{content['language']}\n{code}\n```\n"
              return ""

          def sync_deleted_pages(current_pages):
              """自动删除已移除文章"""
              try:
                  with open(SYNC_RECORD, "r") as f:
                      existing_pages = json.load(f)
                      
                  for page_id in set(existing_pages.keys()) - {p["id"] for p in current_pages}:
                      filename = existing_pages[page_id]
                      if os.path.exists(filename):
                          os.remove(filename)
                          logger.info(f"已删除旧文章: {filename}")
              except FileNotFoundError:
                  pass

          def main():
              notion = Client(auth=os.environ["NOTION_TOKEN"])
              database_id = os.environ["NOTION_DATABASE_ID"]
              sync_mode = os.getenv("SYNC_MODE", "full")
              
              # 构建查询条件
              filter_params = {
                  "filter": {"property": "Status", "select": {"equals": "Published"}}
              }
              if sync_mode == "incremental":
                  filter_params["filter"] = {
                      "and": [
                          {"property": "Status", "select": {"equals": "Published"}},
                          {"timestamp": "last_edited_time", 
                           "last_edited_time": {"after": get_last_sync_time().isoformat()}}
                      ]
                  }

              try:
                  pages = notion.databases.query(database_id, ​**filter_params).get("results", [])
                  current_records = {}
                  
                  for page in pages:
                      try:
                          # 元数据提取
                          title = page["properties"]["Title"]["title"][0]["plain_text"].strip()
                          date_str = page["properties"]["Date"]["date"]["start"].split("T")[0]
                          
                          # 生成文件名
                          filename = f"_posts/{date_str}-{title.replace(' ', '-')}.md"
                          current_records[page["id"]] = filename
                          
                          # 仅当文件不存在或内容变更时处理
                          if not os.path.exists(filename) or page["last_edited_time"] > get_last_sync_time().isoformat():
                              content = get_page_content(page["id"])
                              post = frontmatter.Post(content)
                              # ...（原有元数据设置）...
                              with open(filename, "w", encoding="utf-8") as f:
                                  f.write(frontmatter.dumps(post))
                              logger.info(f"已更新: {filename}")

                      except Exception as e:
                          logger.error(f"处理失败: {str(e)}")

                  # 更新同步记录
                  with open(SYNC_RECORD, "w") as f:
                      json.dump(current_records, f)
                      
                  # 删除旧文章
                  sync_deleted_pages(pages)
                  save_sync_time()

              except Exception as e:
                  logger.error(f"数据库错误: {str(e)}")

          if __name__ == "__main__":
              main()
          EOF

          python notion_to_jekyll.py

      - name: Commit changes
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "Auto-sync from Notion"
          file_pattern: "_posts/*"
