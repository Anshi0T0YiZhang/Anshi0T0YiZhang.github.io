name: Notion to Jekyll Sync v3

on:
  schedule:
    - cron: "0 12 * * *"  # 每天 UTC 时间 12 点自动同步
  workflow_dispatch:       # 支持手动触发

jobs:
  sync-notion-pages:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          pip install --cache-dir=/tmp/pip-cache \
            notion-client==2.2.0 \
            python-frontmatter==1.0.0 \
            requests==2.31.0 \
            mdutils==1.5.0 \
            Pillow==9.3.0 \
            python-dateutil==2.8.2 \
            --index-url https://pypi.tuna.tsinghua.edu.cn/simple \
            --trusted-host pypi.tuna.tsinghua.edu.cn

      - name: Convert Notion pages to Jekyll posts
        env:
          NOTION_TOKEN: ${{ secrets.NOTION_TOKEN }}
          NOTION_DATABASE_ID: ${{ secrets.NOTION_DATABASE_ID }}
          PERSONAL_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
        run: |
          cat << 'EOF' > notion_to_jekyll.py
          import os
          import logging
          import json
          from datetime import datetime
          from dateutil import parser
          from notion_client import Client
          import frontmatter
          import requests
          import glob
          import base64
          import hashlib
          from PIL import Image
          from io import BytesIO

          logging.basicConfig(level=logging.INFO)
          logger = logging.getLogger(__name__)

          def get_last_sync_time():
              try:
                  with open('.last_sync.txt', 'r') as f:
                      return datetime.fromisoformat(f.read().strip()).replace(tzinfo=None)
              except:
                  return None

          def save_last_sync_time():
              with open('.last_sync.txt', 'w') as f:
                  f.write(datetime.now().isoformat())

          def get_page_content(page_id):
              try:
                  blocks = []
                  client = Client(auth=os.environ["NOTION_TOKEN"])
                  result = client.blocks.children.list(block_id=page_id)
                  while True:
                      blocks.extend(result.get("results", []))
                      if not result.get("has_more"):
                          break
                      result = client.blocks.children.list(
                          block_id=page_id,
                          start_cursor=result.get("next_cursor")
                      )
                  return "\n\n".join([_parse_block(b) for b in blocks])
              except Exception as e:
                  logger.error(f"获取内容失败: {str(e)}")
                  return ""

          def _parse_block(block):
              type_ = block["type"]
              content = block[type_]
              text = "".join([t["plain_text"] for t in content.get("rich_text", [])])

              if type_ == "image":
                  original_url = content.get("external", {}).get("url") or content.get("file", {}).get("url")
                  if not original_url:
                      return ""
                  
                  file_name = hashlib.md5(original_url.encode()).hexdigest() + ".jpg"
                  
                  if os.path.exists(f"img/in-post/{file_name}"):
                      return f"![](https://ajiao.eu.org/img/in-post/{file_name})\n"
                  
                  try:
                      response = requests.get(original_url)
                      response.raise_for_status()
                  except requests.exceptions.RequestException as e:
                      logger.error(f"下载图片失败: {str(e)}")
                      return f"![]({original_url})\n"
                  
                  try:
                      image = Image.open(BytesIO(response.content))
                      image = image.convert("RGB")
                      image.thumbnail((1920, 1080))
                      image_bytes = BytesIO()
                      image.save(image_bytes, format="JPEG", quality=85)
                      image_content = image_bytes.getvalue()
                  except Exception as e:
                      logger.error(f"图片格式转换失败: {str(e)}")
                      return f"![]({original_url})\n"
                  
                  try:
                      github_token = os.environ["PERSONAL_TOKEN"]
                      repo = os.environ["GITHUB_REPOSITORY"]
                      branch = "master"
                      headers = {
                          "Authorization": f"token {github_token}",
                          "Accept": "application/vnd.github.v3+json"
                      }
                      url = f"https://api.github.com/repos/{repo}/contents/img/in-post/{file_name}"
                      data = {
                          "message": f"Add image {file_name}",
                          "content": base64.b64encode(image_content).decode(),
                          "branch": branch
                      }
                      response = requests.put(url, headers=headers, json=data)
                      response.raise_for_status()
                  except Exception as e:
                      logger.error(f"上传图片到 GitHub 失败: {str(e)}")
                      return f"![]({original_url})\n"
                  
                  return f"![](https://ajiao.eu.org/img/in-post/{file_name})\n"

              elif type_ in ["paragraph", "heading_1", "heading_2", "heading_3", "bulleted_list_item", "numbered_list_item"]:
                  return f"{text}\n" if type_ == "paragraph" else f"#{' ' * (int(type_[-1]) - 1)} {text}\n"

              elif type_ == "code":
                  code = "\n".join([t["plain_text"] for t in content["rich_text"]])
                  return f"```{content['language']}\n{code}\n```\n"

              elif type_ == "quote":
                  return f"> {text}\n"

              return ""

          def main():
              notion = Client(auth=os.environ["NOTION_TOKEN"])
              database_id = os.environ["NOTION_DATABASE_ID"]
              last_sync = get_last_sync_time()

              try:
                  pages = notion.databases.query(
                      database_id,
                      filter={"property": "Status", "select": {"equals": "Published"}}
                  ).get("results", [])
              except Exception as e:
                  logger.error(f"数据库查询失败: {str(e)}")
                  return

              local_posts = {}
              for post_file in glob.glob("_posts/*.md"):
                  with open(post_file, 'r', encoding='utf-8') as f:
                      post = frontmatter.load(f)
                      if "notion_id" in post:
                          local_posts[post["notion_id"]] = post_file

              used_images = set()

              for page in pages:
                  try:
                      page_id = page["id"]
                      last_edited_time = parser.isoparse(page["last_edited_time"]).replace(tzinfo=None)
                      
                      if last_sync is None or last_edited_time > last_sync:
                          title = page["properties"]["Name"]["title"][0]["plain_text"].strip()
                          date_str = page["properties"]["Date"]["date"]["start"].split("T")[0]
                          content = get_page_content(page_id)
                          post = frontmatter.Post(content)
                          post["title"] = title
                          post["date"] = date_str
                          post["layout"] = "post"
                          post["notion_id"] = page_id

                          image_hashes = []
                          for block in content.split('\n'):
                              if '![](' in block:
                                  url = block.split('![](')[1].split(')')[0]
                                  if url.startswith('https://ajiao.eu.org/img/in-post/'):
                                      image_hash = url.split('/')[-1]
                                      image_hashes.append(image_hash)
                                      used_images.add(image_hash)

                          post["image_hashes"] = image_hashes

                          if page_id in local_posts:
                              filename = local_posts[page_id]
                              with open(filename, 'r', encoding='utf-8') as f:
                                  old_post = frontmatter.load(f)
                                  old_image_hashes = old_post.get("image_hashes", [])
                              for old_image_hash in old_image_hashes:
                                  if old_image_hash not in image_hashes:
                                      image_path = f"img/in-post/{old_image_hash}"
                                      if os.path.exists(image_path):
                                          os.remove(image_path)
                                          try:
                                              github_token = os.environ["PERSONAL_TOKEN"]
                                              repo = os.environ["GITHUB_REPOSITORY"]
                                              branch = "master"
                                              headers = {
                                                  "Authorization": f"token {github_token}",
                                                  "Accept": "application/vnd.github.v3+json"
                                              }
                                              url = f"https://api.github.com/repos/{repo}/contents/img/in-post/{old_image_hash}"
                                              data = {
                                                  "message": f"Remove image {old_image_hash}",
                                                  "sha": get_file_sha(old_image_hash),
                                                  "branch": branch
                                              }
                                              response = requests.delete(url, headers=headers, json=data)
                                              response.raise_for_status()
                              with open(filename, "w", encoding="utf-8") as f:
                                  f.write(frontmatter.dumps(post))
                          else:
                              filename = f"_posts/{date_str}-{title.replace(' ', '-')}.md"
                              with open(filename, "w", encoding="utf-8") as f:
                                  f.write(frontmatter.dumps(post))
                      else:
                          logger.info(f"文章未修改，跳过更新: {page_id}")
                  except Exception as e:
                      logger.error(f"处理失败: {str(e)} (Page ID: {page['id']})")

              for notion_id, post_file in local_posts.items():
                  if notion_id not in [page["id"] for page in pages]:
                      try:
                          with open(post_file, 'r', encoding='utf-8') as f:
                              post = frontmatter.load(f)
                              image_hashes = post.get("image_hashes", [])
                              for image_hash in image_hashes:
                                  image_path = f"img/in-post/{image_hash}"
                                  if os.path.exists(image_path):
                                      os.remove(image_path)
                                      try:
                                          github_token = os.environ["PERSONAL_TOKEN"]
                                          repo = os.environ["GITHUB_REPOSITORY"]
                                          branch = "master"
                                          headers = {
                                              "Authorization": f"token {github_token}",
                                              "Accept": "application/vnd.github.v3+json"
                                          }
                                          url = f"https://api.github.com/repos/{repo}/contents/img/in-post/{image_hash}"
                                          data = {
                                              "message": f"Remove image {image_hash}",
                                              "sha": get_file_sha(image_hash),
                                              "branch": branch
                                          }
                                          response = requests.delete(url, headers=headers, json=data)
                                          response.raise_for_status()
                                      except Exception as e:
                                          logger.error(f"删除图片失败: {str(e)} (Image: {image_hash})")
                          os.remove(post_file)
                      except Exception as e:
                          logger.error(f"删除文章失败: {str(e)} (File: {post_file})")

              save_last_sync_time()

          def get_file_sha(file_name):
              try:
                  github_token = os.environ["PERSONAL_TOKEN"]
                  repo = os.environ["GITHUB_REPOSITORY"]
                  branch = "master"
                  headers = {
                      "Authorization": f"token {github_token}",
                      "Accept": "application/vnd.github.v3+json"
                  }
                  url = f"https://api.github.com/repos/{repo}/contents/img/in-post/{file_name}"
                  response = requests.get(url, headers=headers)
                  response.raise_for_status()
                  return response.json().get("sha")
              except Exception as e:
                  logger.error(f"获取文件 SHA 值失败: {str(e)}")
                  return None

          if __name__ == "__main__":
              main()
          EOF

          python notion_to_jekyll.py

      - name: Pull remote changes
        run: |
          git config --global user.email "your-email@example.com"
          git config --global user.name "Your Name"
          git pull origin master

      - name: Commit changes
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "Auto-sync from Notion"
          file_pattern: "_posts/* .last_sync.txt img/in-post/*"
