---
layout:     post
title:      "关于算法、数据结构的整理"
subtitle:   "多学一点算一点儿吧~"
date:       2016-02-18
author:     "未久夕多"
header-img: "img/home-bg-o.jpg"
tags:
    - 算法
    - 数据结构
---

> 由于俺是学物理的，没有学过计算机相关的基础课程，所以需要自己补习了~T.T


## 1. 算法

### 1.1 算法的基本概念

* 算法：阶梯方案的准确而完整的描述。 算法不等于程序，也不等于计算方法。
* 基本特性：
	* 可行性
	* 确定性
	* 有穷性
	* 拥有足够的情报

### 1.2 算法设计基本方法
* 列举法
* 归纳法
* 递推
* 递归
* 减半递推法
* 回溯法

### 1.3 算法复杂度 *
* 算复杂度：时间复杂度，空间复杂度。
* 时间复杂度：执行算法所需要的计算工作量
	* 算法的工作量用算法所执行的基本运算次数来计算
	* 算法的工作量= f(n)
* 空间复杂度：算法所需要的内存空间


## 2. 数据结构

### 2.1 什么是数据结构
* 数据结构是指相互关联的<b>数据元素</b>的集合。
* 数据结构的研究方向：
	* 数据集合中各数据元素之间所固有的逻辑关系，即<b>数据的逻辑结构</b>；
	* 在对数据进行处理时，个数据元素在计算机中的存储关系，即<b>数据的存储结构</b>；
	* <b>对各种数据结构进行的运算</b>。

* <b>数据的逻辑结构</b>是指反映<b>数据元素之间的逻辑关系的数据结构</b>。
* 数据的逻辑结构有两个要素：
	* 数据元素的集合，记作D
	* 各元素的前后件关系，记作R
* 数据结构B=(D,R)
* 数据的存储结构有顺序，链接，索引等。


### 2.2 数据结构的图形表示
![屏幕快照 2016-02-18 下午10.55.45.png](http://upload-images.jianshu.io/upload_images/1414945-1580eb8e8488d6bb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)

### 2.3 线性结构与非线性结构
* 数据结构分为两大类型：<b>线性结构</b>和<b>非线性结构</b>。
* 线性结构的条件：
	* 有且只有一个根节点
	* 每一个节点最多有一个前件，也最多有一个后件。
* 没有满足线性结构条件的为非线性结构。

## 线性表及其存储结构

### 线性表的基本概念
* 线性表：有一组数据元素构成，数据元素的位置只取决于自己的序号，元素之间的相对位置是线性的。
* 在复杂的线性表中，有若干项数据元素组成的数据元素成为<b>记录</b>，而由多个记录构成的线性表又称为<b>文件</b>。
* 非空线性表的结构特性：
	* 有且只有一个根节点a<sub>1</sub>, 它无前件
	* 有且只有一个终端节点a<sub>n</sub>, 它无后件
	* 除根节点和终端节点外，其他所有节点有且只有一个前件，也有且只有一个后件。节点个数n为<b>线性表的长度</b>，当n=0时，称为<b>空表</b>。

### 线性表的顺序存储结构
* 线性表的顺序存储结构具有以下两个基本特点：
	* 线性表中所有元素的所占存储空间是连续的；
	* 线性表中各数据元素在存储空间中是按逻辑顺序依次存放的。
a<sub>i</sub>的存储地址：
ADR(a<sub>i</sub>)=ADR(a<sub>1</sub>)+(i-1)k, ADR(a<sub>i</sub>)为第一个元素的地址，k代表每个元素所占的字节数。

### 顺序表的插入运算
* 插入的过程：
	* 首先处理3中异常情况：
		* 1、当存储空间已满时为”上溢“错误，不能插入，算法结束；
		* 2、当i>n时，认为在最后一个元素之后插入；
		* 3、当i<1时，认为在第1个元素之前插入。
	* 然后从最后一个元素开始，直到第i个元素，其中每一个元素均往后移动一个位置。
	* 最后将新元素插入到第i个位置，并且将线性表的长度增加1.

### 顺序表的删除运算
* 删除的过程：
	* 首先处理一下2中异常情况：
		* 1、当线性表为空（即n=0）时为”上溢“错误，算法结束；
		* 2、当i<1或i>n时
	* 然后从第i+1个元素开始，直到最后一个元素，其中每个元素依次向前移动一个位置。
	* 最后将线性表的长度减小1。

	
## 栈和队列
### 什么是栈？
* 栈是限定在一端进行插入和删除运算的线性表。
	* 允许插入与删除的一端称为<b>栈顶</b>, 不允许插入与删除的另一端称为<b>栈底</b>。
	* 栈按照<b><font color=red>”先进后出“（FILO）</font></b>或<b><font color=red>”后进先出“（LIFO）</font></b>组织数据
	* 栈具有记忆作用。
	* 用top表示栈顶位置，用bottom表示栈底。

### 栈的顺序存储及其预算
### 什么是队列
### 讯混队咧及其运算





## 树与二叉树

### 树的基本概念

### 二叉树及其基本性质

### 二叉树的存储结构

### 二叉树的遍历


